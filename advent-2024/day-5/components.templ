package day5

import (
	"encoding/json"
	"github.com/dudubtw/giga-algorithms/components"
	"strconv"
	"strings"
)

type ComponentProps struct {
	Manual Manual
}

func GenerateJsonData(props ComponentProps) string {
	jsonBytes, err := json.Marshal(props.Manual)
	if err != nil {
		return ""
	}
	return string(jsonBytes)
}

templ Component(props ComponentProps) {
	<div class="h-screen w-screen flex flex-col gap-2">
		@Header()
		<div class="flex-1 flex gap-2 px-4 pb-4 overflow-hidden">
			@PagesComponent(PagesProps{
				Pages:              props.Manual.Pages,
				InvalidPageIndexes: make([][]int, len(props.Manual.Pages)),
			})
			<div class="flex-[0.9] flex flex-col gap-2">
				@Controls()
				@Order(OrderProps{
					Manual: props.Manual,
				})
			</div>
		</div>
	</div>
	@templ.JSONScript(IdData, GenerateJsonData(props))
	@components.StartScript(Start)
}

templ Header() {
	<div class="py-2 container mx-auto px-4 pt-5">
		@components.Breadcrumbs(components.BreadcrumbsProps{
			Items: []components.BreadcrumbItem{
				{Label: "Home", Link: "/"},
				{Label: "Advent of Code 2024", Link: "/advent-2024"},
				{Label: "Day 5", Link: Route},
			},
		})
		@components.Title("Day 5")
	</div>
}

templ Controls() {
	<div class="bg-gray-50 rounded p-3 flex items-center justify-between">
		@Total(0)
		<div class="flex gap-1">
			@components.Button(components.ButtonProps{
				Variant: "primary",
				Size:    "sm",
				Label:   "Find",
				Type:    "submit",
				Id:      IdFindButton,
			})
			@components.Button(components.ButtonProps{
				Variant: "outline",
				Size:    "sm",
				Label:   "Fix",
				Type:    "button",
				Id:      IdFixButton,
			})
		</div>
	</div>
}

templ Total(value int) {
	<div id={ IdTotal }>Total: { strconv.Itoa(value) } </div>
}

type PagesProps struct {
	Pages              [][]int
	InvalidPageIndexes [][]int
}

func isBetween(num int, bounds []int) bool {
	// Ensure bounds are in order (min, max)
	min, max := bounds[0], bounds[1]
	if min > max {
		min, max = max, min
	}

	return num >= min && num <= max
}

func getPageListClasses(status PageStatus) string {
	baseClasses := "flex rounded-lg"

	var statusClasses string
	switch status {
	case PageStatusUnknown:
		statusClasses = "bg-white"
	case PageStatusInvalid:
		statusClasses = "bg-red-50 text-red-950"
	case PageStatusValid:
		statusClasses = "bg-green-50 text-green-950"
	}

	classes := []string{baseClasses, statusClasses}
	return strings.Join(classes, " ")
}

templ PagesComponent(props PagesProps) {
	<div id={ IdPages } class="flex-1 bg-gray-50 rounded p-3 overflow-y-auto overflow-x-auto flex flex-col gap-2 items-start scrollbar">
		<h2 class="mb-1 text-secondary text-sm font-medium">Pages</h2>
		for index, line := range props.Pages {
			{{ invalidIndex := props.InvalidPageIndexes[index] }}
			{{ status := GetPageStatus(invalidIndex) }}
			@PageLineComponent(PageProps{
				Status:       status,
				InvalidIndex: invalidIndex,
				Line:         line,
			})
		}
	</div>
}

type PageProps struct {
	Status       PageStatus
	InvalidIndex []int
	Line         []int
}

func GetPageClasses(currentIndex int, props PageProps) string {
	classes := "size-[44px] flex justify-center items-center"
	switch props.Status {
	case PageStatusValid:
		if FindPageCollectionMiddleIndex(props.Line) == currentIndex {
			classes += " bg-green-500 text-white rounded"
		}
	case PageStatusInvalid:
		if isBetween(currentIndex, props.InvalidIndex) {
			classes += " bg-red-500 text-white rounded"
		}
	}

	return classes
}

templ PageLineComponent(props PageProps) {
	<div class={ getPageListClasses(props.Status) }>
		for pageIndex, page := range props.Line {
			<div class={ GetPageClasses(pageIndex, props) }>
				{ strconv.Itoa(page) }
			</div>
			if len(props.Line)-1 != pageIndex {
				<div class="w-1 h-full bg-gray-50"></div>
			}
		}
	</div>
}

type OrderProps struct {
	Manual Manual
}

templ Order(props OrderProps) {
	<div class="flex-1 bg-gray-50 rounded overflow-hidden flex flex-col">
		@Tabs(TabsProps{ActiveTab: "all", Manual: props.Manual})
	</div>
}

var all = components.TabItemProps{Label: "All", Value: "all", IsActive: true}
var left = components.TabItemProps{Label: "Left", Value: "left"}
var right = components.TabItemProps{Label: "Right", Value: "right"}
var tabList = []components.TabItemProps{all, left, right}

type TabsProps struct {
	ActiveTab string
	Manual    Manual
}

templ Tabs(props TabsProps) {
	<div id={ IdTabs } class="flex flex-col gap-1 overflow-hidden">
		<div class="px-3 pt-3 flex items-end justify-end">
			@components.Tabs() {
				for _, tab := range tabList {
					@components.TabItem(components.TabItemProps{
						Label: tab.Label,
						Value: tab.Value, IsActive: tab.Value == props.ActiveTab,
						Id: IdTabItem,
					})
				}
			}
		</div>
		if props.ActiveTab == all.Value {
			@AllTabContent(AllTabContentProps{Order: props.Manual.Orders})
		}
		if props.ActiveTab == right.Value {
			@SideTabContent(SideTabContentProps{
				Order: props.Manual.OrderRight,
				Side:  rightSide,
			})
		}
		if props.ActiveTab == left.Value {
			@SideTabContent(SideTabContentProps{
				Order: props.Manual.OrderRight,
				Side:  leftSide,
			})
		}
	</div>
}

type AllTabContentProps struct {
	Order []ManualOrder
}

templ AllTabContent(props AllTabContentProps) {
	<div class="grid grid-cols-4 gap-3 overflow-y-auto scrollbar px-3 pb-3 pt-2">
		for _, order := range props.Order {
			<div class="aspect-[1.4/1] flex bg-white text-sm text-secondary rounded">
				<div class="flex-1 flex items-end justify-start p-1">{ strconv.Itoa(order.X) }</div>
				<div class="flex-1 border-l border-l-gray-100 flex items-end justify-end p-1">{ strconv.Itoa(order.Y) }</div>
			</div>
		}
	</div>
}

type SideName string

const (
	leftSide  SideName = "left"
	rightSide SideName = "right"
)

type SideTabContentProps struct {
	Order Side
	Side  SideName
}

func sideTabContentClass(props SideTabContentProps) string {
	baseClasses := "flex bg-white text-xs text-secondary rounded"

	var directionClass string
	switch props.Side {
	case leftSide:
		directionClass = "flex-row"
	case rightSide:
		directionClass = "flex-row-reverse"
	}

	classes := []string{baseClasses}
	classes = append(classes, directionClass)

	return strings.Join(classes, " ")
}

templ SideTabContent(props SideTabContentProps) {
	<div class="flex flex-col overflow-y-auto overflow-x-auto scrollbar px-3 pb-3 pt-2 gap-3">
		for key, value := range props.Order {
			<div class={ sideTabContentClass(props) }>
				<div class="flex-1 aspect-[1/1.4] bg-black text-white flex items-center justify-center p-2 rounded m-1">{ strconv.Itoa(key) }</div>
				for k2 := range value {
					<div class="flex-1 aspect-[1/1.4] flex items-center justify-center p-3">{ strconv.Itoa(k2) }</div>
				}
			</div>
		}
	</div>
}
